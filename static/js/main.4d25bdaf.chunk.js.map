{"version":3,"sources":["components/ElementContactList/ElementContactList.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/OnLoader/OnLoader.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ElementContactList/ElementContactList.js","components/ElementContactList/ElementContactList.container.js","components/ContactList/ContactList.js","components/Container/Container.js","App.js","redux/store.js","index.js"],"names":["module","exports","OnLoader","type","color","height","width","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","fetchContacts","createAsyncThunk","a","get","data","items","createReducer","contactsTest","fulfilled","_","payload","state","action","filter","id","loading","pending","rejected","combineReducers","getLoading","contacts","getFilter","getAllContacts","sortAllContact","createSelector","slice","sort","b","getVisibleContacts","normalizedFilter","toLowerCase","trim","contact","name","includes","number","ContactForm","props","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","value","setState","addNoRepeatContact","some","alert","onSubmit","reset","handleSubmit","preventDefault","this","className","s","form","htmlFor","span","input","onChange","pattern","title","required","button","Component","defaultProps","connect","dispatch","post","then","catch","error","filterInputId","onChangeFilter","target","ElementContactList","deleteContact","map","item","btnList","onClick","delete","ContactList","list","Container","children","container","App","onFetchContacts","isLoadingContacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d25bdaf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ElementContactList_item__3GcFD\",\"span\":\"ElementContactList_span__1us56\",\"btnList\":\"ElementContactList_btnList__1nuQu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__35zO-\",\"span\":\"Filter_span__25kJy\",\"input\":\"Filter_input__1oH-N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1EPYW\",\"title\":\"Container_title__3RLjU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1ifF1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1KNqy\",\"input\":\"ContactForm_input__1AhWn\",\"span\":\"ContactForm_span__167Cu\",\"button\":\"ContactForm_button__QwcZz\"};","import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nconst OnLoader = () => {\n  return <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />;\n};\n\nexport default OnLoader;\n","import { createAction } from '@reduxjs/toolkit';\n\n// const fetchContactRequest = createAction('contacts/fetchContactRequest');\n// const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\n// const fetchContactError = createAction('contacts/fetchContactError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport {\n  changeFilter,\n  // fetchContactRequest,\n  // fetchContactSuccess,\n  // fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n};\n","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\n\n\nimport {\n  // fetchContactRequest,\n  // fetchContactSuccess,\n  // fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\n\n//--------------------------------createAsyncThunk------------------------\nconst fetchContacts = createAsyncThunk('contacts/fetchContact',\nasync () => {\n  const { data } = await axios.get('/contacts');\n   return data\n})\n\n// ---------------------------async-await-------------------------\n// const fetchContacts = () => async dispatch => {\n//   dispatch(fetchContactRequest());\n//   try {\n//     const { data } = await axios.get('/contacts');\n//     dispatch(fetchContactSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchContactError(error));\n//   }\n// };\n\n\n// -----------------then-cath----------------------------------\n// const fetchContacts = () => dispatch => {\n//   dispatch(fetchContactRequest());\n//   axios\n//     .get('/contacts')\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\n//     .catch(error => dispatch(fetchContactError(error)));\n// };\n//----------------------------------------------------------------\nconst addContact = contact => dispatch => {\n  dispatch(addContactRequest());\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport { addContact, deleteContact, fetchContacts, };\n","import { combineReducers } from 'redux';\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsTest from 'data/contactsTest.json';\nimport {\n  changeFilter,\n  // fetchContactRequest,\n  // fetchContactSuccess,\n  // fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  \n} from './contacts-actions';\n\nimport {fetchContacts} from './contacts-operations'\n\n\n\nconst items = createReducer(contactsTest, {\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, action) => [action.payload, ...state],\n  [deleteContactSuccess]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\n\n\nconst loading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.contacts.loading;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\nconst sortAllContact = createSelector( [getAllContacts], (contacts) => {\n  return contacts.slice().sort(( a, b ) => b.id - a.id);\n}\n)\nconst getVisibleContacts = createSelector(\n  [sortAllContact, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(filter),\n    )\n  },\n);\n\nexport { getLoading, getFilter, getVisibleContacts, getAllContacts, sortAllContact };\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport s from './ContactForm.module.css';\n\nimport { addContact, getAllContacts} from 'redux/contacts';\n// import { addContact } from 'redux/contacts/contacts-operations';\n// import { getAllContacts } from 'redux/contacts/contacts-selectors';\n\nclass ContactForm extends Component {\n  static defaultProps = {\n    name: '',\n    number: '',\n  };\n\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n    contacts: PropTypes.array,\n    onSubmit: PropTypes.func,\n  };\n\n  state = {\n    name: this.props.name,\n    number: this.props.number,\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  addNoRepeatContact = (state, contacts) => {\n    const { name, number } = state;\n    if (\n      contacts.some(\n        contacts => contacts.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    if (contacts.some(contacts => contacts.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit(state);\n    this.reset();\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { contacts } = this.props;\n    this.addNoRepeatContact(this.state, contacts);\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <>\n        <form className={s.form} onSubmit={this.handleSubmit}>\n          <label htmlFor={this.nameInputId} className=\"lable\">\n            <span className={s.span}>Name</span>\n            <input\n              className={s.input}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              id={this.nameInputId}\n            />\n          </label>\n\n          <label htmlFor={this.numberInputId} className=\"lable\">\n            <span className={s.span}>Number</span>\n            <input\n              className={s.input}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              id={this.numberInputId}\n            />\n          </label>\n\n          <button className={s.button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport s from './Filter.module.css';\n\nimport { changeFilter, getFilter } from 'redux/contacts';\n// import { changeFilter } from 'redux/contacts/contacts-actions';\n// import { getFilter } from 'redux/contacts/contacts-selectors';\n\nconst filterInputId = uuidv4();\n\nconst Filter = ({ filter, onChangeFilter }) => {\n  return (\n    <label htmlFor={filterInputId}>\n      <span className={s.span}>Find contacts by name and number</span>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        id={filterInputId}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChangeFilter: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './ElementContactList.module.css';\n\nconst ElementContactList = ({ contacts, deleteContact }) => {\n  return contacts.map(({ name, number, id }) => {\n    return (\n      <li className={s.item} key={id}>\n        <span className={s.span}></span>\n        {name}: {number}\n        <button\n          type=\"button\"\n          className={s.btnList}\n          onClick={() => deleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n};\n\nElementContactList.propTypes = {\n  contacts: PropTypes.array,\n  deleteContact: PropTypes.func,\n};\n\nexport default ElementContactList;\n","import { connect } from 'react-redux';\n\n\nimport ElementContactList from './ElementContactList';\nimport { getVisibleContacts, deleteContact } from 'redux/contacts';\n// import { getVisibleContacts } from 'redux/contacts/contacts-selectors';\n// import { deleteContact } from 'redux/contacts/contacts-operations';\n\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ElementContactList);\n","import React from 'react';\n\nimport ElementContactList from 'components/ElementContactList';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  return (\n    <ul className={s.list}>\n      <ElementContactList />\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport s from './Container.module.css';\n\nconst Container = ({ children, title }) => (\n  <div className={s.container}>\n    <h1 className={s.title}>{title}</h1>\n    {children}\n  </div>\n);\n\nexport default Container;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport OnLoader from 'components/OnLoader';\n\nimport './App.css';\n\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport Container from 'components/Container';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { getLoading } from 'redux/contacts/contacts-selectors';\n\nclass App extends Component {\n  static propTypes = {\n    onFetchContacts: PropTypes.func,\n    isLoadingContacts: PropTypes.bool,\n  };\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    return (\n      <Container title=\"Phonebook\">\n        <ContactForm />\n        <h2 className=\"title\">Contacts</h2>\n        {this.props.isLoadingContacts ? (\n          <OnLoader />\n        ) : (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        )}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFetchContacts: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import contactsReducer from './contacts/contacts-reducer';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport { store } from 'redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}